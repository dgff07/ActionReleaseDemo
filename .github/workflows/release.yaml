name: "release"

on:
  workflow_dispatch:

jobs:
  define_version:
    runs-on: ubuntu-latest
    name: Define version
    outputs:
      old_tag_version: ${{ steps.define_version.outputs.old_tag_version }}
      tag_version: ${{ steps.define_version.outputs.tag_version }}
    steps:
      - name: Checkout api-gateway repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Define version
        id: define_version
        run: |
          exist_tag=$(git tag)
          last_tag=""
          echo "::set-output name=old_tag_version::na"

          if [[ -n "$exist_tag" ]]; then
              last_tag=$(git describe --abbrev=0 --tags)
              echo "::set-output name=old_tag_version::$last_tag"
          fi

          major=0
          minor=0
          patch=0

          echo "========LAST tag========"
          echo "$last_tag"

          if [[ $last_tag =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]; then

              IFS='.' read -ra ELEM <<< "$last_tag"
              major=${ELEM[0]}
              minor=${ELEM[1]}
              patch=${ELEM[2]}
          fi

          last_commit=$(git log -1 --pretty=%B)
          echo "========LAST commit========"
          echo "$last_commit"

          version_upgraded=1

          is_major () {
              [[ "$1" == *"breaking change:"* ]]
          }

          is_minor () {
              [[ "$1" =~ ^feat[(]?.*[)]?:.* ]]
          }

          is_patch () {
              [[ "$1" =~ ^fix[(]?.*[)]?:.* ]]
          }

          if is_patch $last_commit; then
              echo "Creating patch release"
              patch="$((patch+1))"
          elif is_major $last_commit; then
              echo "Creating major release"
              major="$((major+1))"
              minor="0"
              patch="0"
          elif is_minor $last_commit; then
              echo "Creating minor release"
              minor="$((minor+1))"
              patch="0"
          else
              echo "Without version upgrade"
              version_upgraded=0
          fi

          tag_version="na"
          if [[ $version_upgraded == 1 ]]; then 
              tag_version="$major.$minor.$patch"
              echo "::set-output name=tag_version::$tag_version"
              echo "New version: $tag_version"
          fi
  
  create_release:
    needs: define_version
    runs-on: ubuntu-latest
    name: Create release
    steps:
      - name: Checkout api-gateway repository
        uses: actions/checkout@v2

      - name: Create release
        run: |
          tag_version="${{needs.define_version.outputs.tag_version}}"
          
          if [[ "$tag_version" == "na" ]]; then
            echo "The release will not be created"
            exit 0
          fi

          old_tag_version="${{needs.define_version.outputs.old_tag_version}}"

          body=""

          case old_tag_version in

              na)
                  body="# Changelog \n Check [here](https://github.com/dgff07/ActionReleaseDemo/commits/$tag_version) all the changes made on this release"
                  ;;

              *)
                  body="# Changelog \n Check [here](https://github.com/dgff07/ActionReleaseDemo/compare/$old_tag_version...$tag_version) all the changes made on this release"
                  ;;
          esac

          curl -v -i -X POST -H "Content-Type:application/json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/dgff07/ActionReleaseDemo/releases -d '{"tag_name":"'"$tag_version"'","target_commitish": "main","name":"'"$tag_version"'","body":"'"$body"'","draft": false,"prerelease": false}'


          

